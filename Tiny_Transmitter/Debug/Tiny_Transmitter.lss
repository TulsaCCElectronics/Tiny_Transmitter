
Tiny_Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000806  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000806  0000089a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ec  00800060  00800060  0000089a  2**0
                  ALLOC
  3 .stab         0000075c  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010c  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000118  00000000  00000000  00001133  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000ef4  00000000  00000000  0000124b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004f5  00000000  00000000  0000213f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000007bd  00000000  00000000  00002634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002a0  00000000  00000000  00002df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003ff  00000000  00000000  00003094  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000051b  00000000  00000000  00003493  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  000039ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e6 e0       	ldi	r30, 0x06	; 6
  3e:	f8 e0       	ldi	r31, 0x08	; 8
  40:	02 c0       	rjmp	.+4      	; 0x46 <__SREG__+0x7>
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	a0 36       	cpi	r26, 0x60	; 96
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <__SREG__+0x3>

0000004c <__do_clear_bss>:
  4c:	21 e0       	ldi	r18, 0x01	; 1
  4e:	a0 e6       	ldi	r26, 0x60	; 96
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	ac 34       	cpi	r26, 0x4C	; 76
  58:	b2 07       	cpc	r27, r18
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	70 d3       	rcall	.+1760   	; 0x73e <main>
  5e:	d1 c3       	rjmp	.+1954   	; 0x802 <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <ax25crcBit>:
	while (value >= 10)
	{
		value -= 10;
		count++;
	}
	ax25sendByte(count + 48);
  62:	20 91 60 00 	lds	r18, 0x0060
	ax25sendByte(value + 48);
  66:	30 91 61 00 	lds	r19, 0x0061
  6a:	82 27       	eor	r24, r18
	return;

}		// End ax25sendASCIIebyte(unsigned short value)
  6c:	93 27       	eor	r25, r19
  6e:	90 93 69 00 	sts	0x0069, r25
* RETURN:	None
*/
{
	static unsigned short	xor_int;

	xor_int = crc ^ lsb_int;				// XOR lsb of CRC with the latest bit
  72:	80 93 68 00 	sts	0x0068, r24
	crc >>= 1;									// Shift 16-bit CRC one bit to the right
  76:	36 95       	lsr	r19
  78:	27 95       	ror	r18

	if (xor_int & 0x0001)					// If XOR result from above has lsb set
  7a:	80 fd       	sbrc	r24, 0
  7c:	05 c0       	rjmp	.+10     	; 0x88 <ax25crcBit+0x26>
*/
{
	static unsigned short	xor_int;

	xor_int = crc ^ lsb_int;				// XOR lsb of CRC with the latest bit
	crc >>= 1;									// Shift 16-bit CRC one bit to the right
  7e:	30 93 61 00 	sts	0x0061, r19
  82:	20 93 60 00 	sts	0x0060, r18
  86:	08 95       	ret

	if (xor_int & 0x0001)					// If XOR result from above has lsb set
	{
		crc ^= 0x8408;							// Shift 16-bit CRC one bit to the right
  88:	88 e0       	ldi	r24, 0x08	; 8
  8a:	28 27       	eor	r18, r24
  8c:	84 e8       	ldi	r24, 0x84	; 132
  8e:	38 27       	eor	r19, r24
  90:	30 93 61 00 	sts	0x0061, r19
  94:	20 93 60 00 	sts	0x0060, r18
  98:	08 95       	ret

0000009a <ax25sendByte>:
*
* INPUT:		txbyte	The byte to transmit
* OUTPUT:	None
* RETURN:	None
*/
{
  9a:	ff 92       	push	r15
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	18 2f       	mov	r17, r24
	static char	loop;
	static char	bitbyte;
	static int	bit_zero;
	static unsigned char	sequential_ones;

	bitbyte = txbyte;							// Bitbyte will be rotated through
  a6:	80 93 63 00 	sts	0x0063, r24

	for (loop = 0 ; loop < 8 ; loop++)	// Loop for eight bits in the byte
  aa:	10 92 64 00 	sts	0x0064, r1
		else										// Else, least significant bit is high
		{
			if (++sequential_ones == 5)	// Is this the 5th "1" in a row?
			{
				mainDelay(BIT_DELAY);		// Go ahead and send it
				txtone = (txtone == MARK)? SPACE : MARK; // Toggle transmit tone
  ae:	07 ea       	ldi	r16, 0xA7	; 167
  b0:	0f 2e       	mov	r0, r31
  b2:	f1 ed       	ldi	r31, 0xD1	; 209
  b4:	ff 2e       	mov	r15, r31
  b6:	f0 2d       	mov	r31, r0

	bitbyte = txbyte;							// Bitbyte will be rotated through

	for (loop = 0 ; loop < 8 ; loop++)	// Loop for eight bits in the byte
	{
		bit_zero = bitbyte & 0x01;			// Set aside the least significant bit
  b8:	90 91 63 00 	lds	r25, 0x0063
  bc:	91 70       	andi	r25, 0x01	; 1
  be:	c9 2f       	mov	r28, r25
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	d8 2f       	mov	r29, r24
  c4:	d0 93 66 00 	sts	0x0066, r29
  c8:	c0 93 65 00 	sts	0x0065, r28

		if (txbyte == 0x7E)					// Is the transmit character a flag?
  cc:	1e 37       	cpi	r17, 0x7E	; 126
  ce:	19 f4       	brne	.+6      	; 0xd6 <ax25sendByte+0x3c>
		{
			sequential_ones = 0;				// it is immune from sequential 1's
  d0:	10 92 67 00 	sts	0x0067, r1
  d4:	02 c0       	rjmp	.+4      	; 0xda <ax25sendByte+0x40>
		}
		else										// The transmit character is not a flag
		{
			(ax25crcBit(bit_zero));			// So modify the checksum
  d6:	ce 01       	movw	r24, r28
  d8:	c4 df       	rcall	.-120    	; 0x62 <ax25crcBit>
		}

		if (!(bit_zero))						// Is the least significant bit low?
  da:	cd 2b       	or	r28, r29
  dc:	61 f4       	brne	.+24     	; 0xf6 <ax25sendByte+0x5c>
		{
			sequential_ones = 0;				// Clear the number of ones we have sent
  de:	10 92 67 00 	sts	0x0067, r1
			txtone = (txtone == MARK)? SPACE : MARK; // Toggle transmit tone
  e2:	80 91 41 01 	lds	r24, 0x0141
  e6:	87 3a       	cpi	r24, 0xA7	; 167
  e8:	11 f4       	brne	.+4      	; 0xee <ax25sendByte+0x54>
  ea:	8f 2d       	mov	r24, r15
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <ax25sendByte+0x56>
  ee:	80 2f       	mov	r24, r16
  f0:	80 93 41 01 	sts	0x0141, r24
  f4:	14 c0       	rjmp	.+40     	; 0x11e <ax25sendByte+0x84>
		}
		else										// Else, least significant bit is high
		{
			if (++sequential_ones == 5)	// Is this the 5th "1" in a row?
  f6:	90 91 67 00 	lds	r25, 0x0067
  fa:	9f 5f       	subi	r25, 0xFF	; 255
  fc:	90 93 67 00 	sts	0x0067, r25
 100:	95 30       	cpi	r25, 0x05	; 5
 102:	69 f4       	brne	.+26     	; 0x11e <ax25sendByte+0x84>
			{
				mainDelay(BIT_DELAY);		// Go ahead and send it
 104:	8d eb       	ldi	r24, 0xBD	; 189
 106:	fb d2       	rcall	.+1526   	; 0x6fe <mainDelay>
				txtone = (txtone == MARK)? SPACE : MARK; // Toggle transmit tone
 108:	80 91 41 01 	lds	r24, 0x0141
 10c:	87 3a       	cpi	r24, 0xA7	; 167
 10e:	11 f4       	brne	.+4      	; 0x114 <ax25sendByte+0x7a>
 110:	8f 2d       	mov	r24, r15
 112:	01 c0       	rjmp	.+2      	; 0x116 <ax25sendByte+0x7c>
 114:	80 2f       	mov	r24, r16
 116:	80 93 41 01 	sts	0x0141, r24
				sequential_ones = 0;			// Clear the number of ones we have sent
 11a:	10 92 67 00 	sts	0x0067, r1
			}

		}

		bitbyte >>= 1;							// Shift the reference byte one bit right
 11e:	90 91 63 00 	lds	r25, 0x0063
 122:	96 95       	lsr	r25
 124:	90 93 63 00 	sts	0x0063, r25
		mainDelay(BIT_DELAY);				// Pause for the bit to be sent
 128:	8d eb       	ldi	r24, 0xBD	; 189
 12a:	e9 d2       	rcall	.+1490   	; 0x6fe <mainDelay>
	static int	bit_zero;
	static unsigned char	sequential_ones;

	bitbyte = txbyte;							// Bitbyte will be rotated through

	for (loop = 0 ; loop < 8 ; loop++)	// Loop for eight bits in the byte
 12c:	90 91 64 00 	lds	r25, 0x0064
 130:	9f 5f       	subi	r25, 0xFF	; 255
 132:	90 93 64 00 	sts	0x0064, r25
 136:	98 30       	cpi	r25, 0x08	; 8
 138:	08 f4       	brcc	.+2      	; 0x13c <ax25sendByte+0xa2>
 13a:	be cf       	rjmp	.-132    	; 0xb8 <ax25sendByte+0x1e>
		mainDelay(BIT_DELAY);				// Pause for the bit to be sent
	}

	return;

}		// End ax25sendByte(unsigned char txbyte)
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	08 95       	ret

00000148 <ax25sendString>:
*
* INPUT:		*szString	Pointer to string to send
* OUTPUT:	None
* RETURN:	None
*/
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
	while (*address != 0)
 14e:	88 81       	ld	r24, Y
 150:	88 23       	and	r24, r24
 152:	29 f0       	breq	.+10     	; 0x15e <ax25sendString+0x16>

}		// End ax25sendASCIIebyte(unsigned short value)


/******************************************************************************/
extern void ax25sendString(char *address)
 154:	21 96       	adiw	r28, 0x01	; 1
* RETURN:	None
*/
{
	while (*address != 0)
	{
		ax25sendByte(*address);
 156:	a1 df       	rcall	.-190    	; 0x9a <ax25sendByte>
* INPUT:		*szString	Pointer to string to send
* OUTPUT:	None
* RETURN:	None
*/
{
	while (*address != 0)
 158:	89 91       	ld	r24, Y+
 15a:	81 11       	cpse	r24, r1
 15c:	fc cf       	rjmp	.-8      	; 0x156 <ax25sendString+0xe>
		address++;
	}

	return;

}		// End ax25sendString(char *address)
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <ax25sendEEPROMString>:
*
* INPUT:		address	Starting address for the string
* OUTPUT:	None
* RETURN:	None
*/
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
	static unsigned char temp_char;

	temp_char = eeprom_read_byte ((uint8_t *)(address));
 16a:	43 d3       	rcall	.+1670   	; 0x7f2 <__eerd_byte_tn4313>
 16c:	80 93 6a 00 	sts	0x006A, r24
	while (temp_char)
 170:	88 23       	and	r24, r24
 172:	41 f0       	breq	.+16     	; 0x184 <ax25sendEEPROMString+0x20>
	{
		ax25sendByte(temp_char);
 174:	92 df       	rcall	.-220    	; 0x9a <ax25sendByte>
		temp_char = eeprom_read_byte ((uint8_t *)(++address));
 176:	21 96       	adiw	r28, 0x01	; 1
 178:	ce 01       	movw	r24, r28
 17a:	3b d3       	rcall	.+1654   	; 0x7f2 <__eerd_byte_tn4313>
 17c:	80 93 6a 00 	sts	0x006A, r24
*/
{
	static unsigned char temp_char;

	temp_char = eeprom_read_byte ((uint8_t *)(address));
	while (temp_char)
 180:	81 11       	cpse	r24, r1
 182:	f8 cf       	rjmp	.-16     	; 0x174 <ax25sendEEPROMString+0x10>
		temp_char = eeprom_read_byte ((uint8_t *)(++address));
	}

	return;

}		// End ax25sendEEPROMString(unsigned int address)
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <ax25sendHeader>:
* RETURN:	None
*/
{
	static unsigned char	loop_delay;

	crc = 0xFFFF;							// Initialize the crc register
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	9f ef       	ldi	r25, 0xFF	; 255
 18e:	90 93 61 00 	sts	0x0061, r25
 192:	80 93 60 00 	sts	0x0060, r24

	// Transmit the Flag field to begin the UI-Frame
	// Adjust length for txdelay (each one takes 6.7ms)
	for (loop_delay = 0 ; loop_delay < TXDELAY ; loop_delay++)
 196:	10 92 62 00 	sts	0x0062, r1
	{
		(ax25sendByte(0x7E));
 19a:	8e e7       	ldi	r24, 0x7E	; 126
 19c:	7e df       	rcall	.-260    	; 0x9a <ax25sendByte>

	crc = 0xFFFF;							// Initialize the crc register

	// Transmit the Flag field to begin the UI-Frame
	// Adjust length for txdelay (each one takes 6.7ms)
	for (loop_delay = 0 ; loop_delay < TXDELAY ; loop_delay++)
 19e:	80 91 62 00 	lds	r24, 0x0062
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 62 00 	sts	0x0062, r24
 1a8:	84 36       	cpi	r24, 0x64	; 100
 1aa:	b8 f3       	brcs	.-18     	; 0x19a <ax25sendHeader+0x10>
	ax25sendByte(0x03);						// Control field - 0x03 is APRS UI-frame
	ax25sendByte(0xF0);						// Protocol ID - 0xF0 is no layer 3
*/

//	ax25sendEEPROMString(0);				// Send the header for use on 144.39 MHz
	ax25sendEEPROMString(31);				// Trimmed header for use in 144.34 MHz
 1ac:	8f e1       	ldi	r24, 0x1F	; 31
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	d9 df       	rcall	.-78     	; 0x164 <ax25sendEEPROMString>
 1b2:	08 95       	ret

000001b4 <SerInit>:
* OUTPUT:	None
* RETURN:	None
*/
{
	// Set baud rate of USART to 4800 baud at 14.7456 MHz
	UBRRH = 0;
 1b4:	12 b8       	out	0x02, r1	; 2
	UBRRL = 191;
 1b6:	8f eb       	ldi	r24, 0xBF	; 191
 1b8:	89 b9       	out	0x09, r24	; 9

	// Set frame format to 8 data bits, no parity, and 1stop bit
	UCSRC = (1<<UMSEL)|(3<<UCSZ0);
 1ba:	86 e4       	ldi	r24, 0x46	; 70
 1bc:	83 b9       	out	0x03, r24	; 3

	// Enable Receiver and Transmitter Interrupt, Receiver and Transmitter
	UCSRB = (1<<RXCIE)|(1<<TXCIE)|(1<<RXEN)|(1<<TXEN);
 1be:	88 ed       	ldi	r24, 0xD8	; 216
 1c0:	8a b9       	out	0x0a, r24	; 10
 1c2:	08 95       	ret

000001c4 <Serial_Processes>:
* INPUT:		None
* OUTPUT:	None
* RETURN:	None
*/
{
	if (intail != inhead)					// If there are incoming bytes pending
 1c4:	80 91 6b 00 	lds	r24, 0x006B
 1c8:	90 91 6c 00 	lds	r25, 0x006C
 1cc:	89 17       	cp	r24, r25
 1ce:	79 f0       	breq	.+30     	; 0x1ee <Serial_Processes+0x2a>
	{
		if (++intail == BUF_SIZE) intail = 0;	// Advance and wrap pointer
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	80 36       	cpi	r24, 0x60	; 96
 1d4:	19 f0       	breq	.+6      	; 0x1dc <Serial_Processes+0x18>
 1d6:	80 93 6b 00 	sts	0x006B, r24
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <Serial_Processes+0x1c>
 1dc:	10 92 6b 00 	sts	0x006B, r1
		MsgHandler(inbuf[intail]);		// And pass it to a handler
 1e0:	e0 91 6b 00 	lds	r30, 0x006B
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	e3 59       	subi	r30, 0x93	; 147
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	80 81       	ld	r24, Z
 1ec:	dd d1       	rcall	.+954    	; 0x5a8 <MsgHandler>
 1ee:	08 95       	ret

000001f0 <MsgInit>:
* INPUT:		None
* OUTPUT:	None
* RETURN:	None
*/
{
	Speed_Temp[0] = Speed_Temp[1] = Speed_Temp[2] = '0';
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	80 93 cf 00 	sts	0x00CF, r24
 1f6:	80 93 ce 00 	sts	0x00CE, r24
 1fa:	80 93 cd 00 	sts	0x00CD, r24
	Course_Temp[0] = Course_Temp[1] = Course_Temp[2] = '0';
 1fe:	80 93 d5 00 	sts	0x00D5, r24
 202:	80 93 d4 00 	sts	0x00D4, r24
 206:	80 93 d3 00 	sts	0x00D3, r24
	Altitude_Temp[0] = Altitude_Temp[1] = '0';
 20a:	80 93 da 00 	sts	0x00DA, r24
 20e:	80 93 d9 00 	sts	0x00D9, r24
	Altitude_Temp[2] = '.';
 212:	8e e2       	ldi	r24, 0x2E	; 46
 214:	80 93 db 00 	sts	0x00DB, r24
 218:	08 95       	ret

0000021a <MsgPrepare>:
*
* INPUT:		None
* OUTPUT:	None
* RETURN:	None
*/
{
 21a:	8f 92       	push	r8
 21c:	9f 92       	push	r9
 21e:	af 92       	push	r10
 220:	bf 92       	push	r11
 222:	cf 92       	push	r12
 224:	df 92       	push	r13
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	e2 e4       	ldi	r30, 0x42	; 66
 234:	f1 e0       	ldi	r31, 0x01	; 1
 236:	a2 ee       	ldi	r26, 0xE2	; 226
 238:	b0 e0       	ldi	r27, 0x00	; 0
	return;

}		// End MsgInit

/******************************************************************************/
extern void MsgPrepare(void)
 23a:	88 e4       	ldi	r24, 0x48	; 72
 23c:	91 e0       	ldi	r25, 0x01	; 1
	static unsigned long	LongTemp;		// Just a long temp variable
	static unsigned char	index;			// For indexing local arrays
	static unsigned char	count;			// Keeps track of loops	in F-to-A

	for (index = 0; index < 6 ; index++)			// Grab latest Time
		Time[index] = Time_Temp[index];
 23e:	21 91       	ld	r18, Z+
 240:	2d 93       	st	X+, r18
	static unsigned long	LongAltitude;	// Used to convert meters to feet
	static unsigned long	LongTemp;		// Just a long temp variable
	static unsigned char	index;			// For indexing local arrays
	static unsigned char	count;			// Keeps track of loops	in F-to-A

	for (index = 0; index < 6 ; index++)			// Grab latest Time
 242:	e8 17       	cp	r30, r24
 244:	f9 07       	cpc	r31, r25
 246:	d9 f7       	brne	.-10     	; 0x23e <MsgPrepare+0x24>
		Time[index] = Time_Temp[index];
	Time[index] = 0; 										// Terminate string
 248:	10 92 e8 00 	sts	0x00E8, r1
 24c:	e9 ee       	ldi	r30, 0xE9	; 233
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	a3 ef       	ldi	r26, 0xF3	; 243
 252:	b0 e0       	ldi	r27, 0x00	; 0
	return;

}		// End MsgInit

/******************************************************************************/
extern void MsgPrepare(void)
 254:	82 ef       	ldi	r24, 0xF2	; 242
 256:	90 e0       	ldi	r25, 0x00	; 0
	for (index = 0; index < 6 ; index++)			// Grab latest Time
		Time[index] = Time_Temp[index];
	Time[index] = 0; 										// Terminate string

	for (index = 0; index < 9 ; index++)			// Grab latest Latitude
		Latitude[index] = Latitude_Temp[index];
 258:	21 91       	ld	r18, Z+
 25a:	2d 93       	st	X+, r18

	for (index = 0; index < 6 ; index++)			// Grab latest Time
		Time[index] = Time_Temp[index];
	Time[index] = 0; 										// Terminate string

	for (index = 0; index < 9 ; index++)			// Grab latest Latitude
 25c:	e8 17       	cp	r30, r24
 25e:	f9 07       	cpc	r31, r25
 260:	d9 f7       	brne	.-10     	; 0x258 <MsgPrepare+0x3e>
		Latitude[index] = Latitude_Temp[index];
	Latitude[index] = 0;									// Terminate string
 262:	10 92 fc 00 	sts	0x00FC, r1
 266:	ed ef       	ldi	r30, 0xFD	; 253
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	a8 e0       	ldi	r26, 0x08	; 8
 26c:	b1 e0       	ldi	r27, 0x01	; 1
	return;

}		// End MsgInit

/******************************************************************************/
extern void MsgPrepare(void)
 26e:	87 e0       	ldi	r24, 0x07	; 7
 270:	91 e0       	ldi	r25, 0x01	; 1
	for (index = 0; index < 9 ; index++)			// Grab latest Latitude
		Latitude[index] = Latitude_Temp[index];
	Latitude[index] = 0;									// Terminate string

	for (index = 0; index < 10 ; index++)			// Grab latest Longitude
		Longitude[index] = Longitude_Temp[index];
 272:	21 91       	ld	r18, Z+
 274:	2d 93       	st	X+, r18

	for (index = 0; index < 9 ; index++)			// Grab latest Latitude
		Latitude[index] = Latitude_Temp[index];
	Latitude[index] = 0;									// Terminate string

	for (index = 0; index < 10 ; index++)			// Grab latest Longitude
 276:	e8 17       	cp	r30, r24
 278:	f9 07       	cpc	r31, r25
 27a:	d9 f7       	brne	.-10     	; 0x272 <MsgPrepare+0x58>
		Longitude[index] = Longitude_Temp[index];
	Longitude[index] = 0;								// Terminate string
 27c:	10 92 12 01 	sts	0x0112, r1
 280:	e9 ed       	ldi	r30, 0xD9	; 217
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	a3 e1       	ldi	r26, 0x13	; 19
 286:	b1 e0       	ldi	r27, 0x01	; 1
	return;

}		// End MsgInit

/******************************************************************************/
extern void MsgPrepare(void)
 288:	80 ee       	ldi	r24, 0xE0	; 224
 28a:	90 e0       	ldi	r25, 0x00	; 0
	for (index = 0; index < 10 ; index++)			// Grab latest Longitude
		Longitude[index] = Longitude_Temp[index];
	Longitude[index] = 0;								// Terminate string

	for (index = 0; index < 7 ; index++)			// Grab latest Altitude
		Altitude[index] = Altitude_Temp[index];
 28c:	21 91       	ld	r18, Z+
 28e:	2d 93       	st	X+, r18

	for (index = 0; index < 10 ; index++)			// Grab latest Longitude
		Longitude[index] = Longitude_Temp[index];
	Longitude[index] = 0;								// Terminate string

	for (index = 0; index < 7 ; index++)			// Grab latest Altitude
 290:	e8 17       	cp	r30, r24
 292:	f9 07       	cpc	r31, r25
 294:	d9 f7       	brne	.-10     	; 0x28c <MsgPrepare+0x72>
		Altitude[index] = Altitude_Temp[index];
	Altitude[index] = 0;									// Terminate string
 296:	10 92 1a 01 	sts	0x011A, r1

	for (index = 0; index < 5 ; index++)			// Grab latest Speed
		Speed[index] = Speed_Temp[index];
 29a:	80 91 cd 00 	lds	r24, 0x00CD
 29e:	80 93 1b 01 	sts	0x011B, r24
 2a2:	80 91 ce 00 	lds	r24, 0x00CE
 2a6:	80 93 1c 01 	sts	0x011C, r24
 2aa:	80 91 cf 00 	lds	r24, 0x00CF
 2ae:	80 93 1d 01 	sts	0x011D, r24
 2b2:	80 91 d0 00 	lds	r24, 0x00D0
 2b6:	80 93 1e 01 	sts	0x011E, r24
 2ba:	80 91 d1 00 	lds	r24, 0x00D1
 2be:	80 93 1f 01 	sts	0x011F, r24
	Speed[index] = 0;										// Terminate string
 2c2:	10 92 20 01 	sts	0x0120, r1

	for (index = 0; index < 5 ; index++)			// Grab latest Course
		Course[index] = Course_Temp[index];
 2c6:	80 91 d3 00 	lds	r24, 0x00D3
 2ca:	80 93 21 01 	sts	0x0121, r24
 2ce:	80 91 d4 00 	lds	r24, 0x00D4
 2d2:	80 93 22 01 	sts	0x0122, r24
 2d6:	80 91 d5 00 	lds	r24, 0x00D5
 2da:	80 93 23 01 	sts	0x0123, r24
 2de:	80 91 d6 00 	lds	r24, 0x00D6
 2e2:	80 93 24 01 	sts	0x0124, r24
 2e6:	80 91 d7 00 	lds	r24, 0x00D7
 2ea:	80 93 25 01 	sts	0x0125, r24
	Course[index] = 0;									// Terminate string
 2ee:	10 92 26 01 	sts	0x0126, r1

	for (index = 0; index < 2 ; index++)			// Grab latest Satellites
		Satellites[index] = Satellites_Temp[index];
 2f2:	80 91 27 01 	lds	r24, 0x0127
 2f6:	80 93 2a 01 	sts	0x012A, r24
 2fa:	80 91 28 01 	lds	r24, 0x0128
 2fe:	80 93 2b 01 	sts	0x012B, r24
	Satellites[index] = 0;								// Terminate string
 302:	10 92 2c 01 	sts	0x012C, r1

	index = 0;									// Reset index for this search
	Altitude[6] = '.';						// Force last character to a '.'
 306:	8e e2       	ldi	r24, 0x2E	; 46
 308:	80 93 19 01 	sts	0x0119, r24
 30c:	c1 e0       	ldi	r28, 0x01	; 1
	while (Altitude[++index] != '.');	// Find the decimal in Alt string
 30e:	01 c0       	rjmp	.+2      	; 0x312 <MsgPrepare+0xf8>
 310:	c9 2f       	mov	r28, r25
 312:	9c 2f       	mov	r25, r28
 314:	9f 5f       	subi	r25, 0xFF	; 255
 316:	ec 2f       	mov	r30, r28
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	ed 5e       	subi	r30, 0xED	; 237
 31c:	fe 4f       	sbci	r31, 0xFE	; 254
 31e:	80 81       	ld	r24, Z
 320:	8e 32       	cpi	r24, 0x2E	; 46
 322:	b1 f7       	brne	.-20     	; 0x310 <MsgPrepare+0xf6>

	LongAltitude = 0;							// Begin with a blank slate
 324:	10 92 2d 01 	sts	0x012D, r1
 328:	10 92 2e 01 	sts	0x012E, r1
 32c:	10 92 2f 01 	sts	0x012F, r1
 330:	10 92 30 01 	sts	0x0130, r1
	while (index)			// This is Float-to-A, working from the decimal leftward
 334:	cc 23       	and	r28, r28
 336:	09 f4       	brne	.+2      	; 0x33a <MsgPrepare+0x120>
 338:	45 c0       	rjmp	.+138    	; 0x3c4 <MsgPrepare+0x1aa>
 33a:	00 91 31 01 	lds	r16, 0x0131
 33e:	10 91 32 01 	lds	r17, 0x0132
 342:	d0 91 33 01 	lds	r29, 0x0133
 346:	b0 90 34 01 	lds	r11, 0x0134
 34a:	c1 2c       	mov	r12, r1
 34c:	d1 2c       	mov	r13, r1
 34e:	76 01       	movw	r14, r12
	{
		LongAltitude += (Altitude[--index] - 48) * LongTemp; // Right to left
 350:	c1 50       	subi	r28, 0x01	; 1
 352:	ec 2f       	mov	r30, r28
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	ed 5e       	subi	r30, 0xED	; 237
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	20 81       	ld	r18, Z
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	20 53       	subi	r18, 0x30	; 48
 360:	31 09       	sbc	r19, r1
 362:	44 27       	eor	r20, r20
 364:	37 fd       	sbrc	r19, 7
 366:	40 95       	com	r20
 368:	54 2f       	mov	r21, r20
 36a:	60 2f       	mov	r22, r16
 36c:	71 2f       	mov	r23, r17
 36e:	8d 2f       	mov	r24, r29
 370:	9b 2d       	mov	r25, r11
 372:	04 d2       	rcall	.+1032   	; 0x77c <__mulsi3>
 374:	c6 0e       	add	r12, r22
 376:	d7 1e       	adc	r13, r23
 378:	e8 1e       	adc	r14, r24
 37a:	f9 1e       	adc	r15, r25
		LongTemp *= 10;						// Each digit is worth 10x previous
 37c:	40 2f       	mov	r20, r16
 37e:	51 2f       	mov	r21, r17
 380:	6d 2f       	mov	r22, r29
 382:	7b 2d       	mov	r23, r11
 384:	44 0f       	add	r20, r20
 386:	55 1f       	adc	r21, r21
 388:	66 1f       	adc	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	db 01       	movw	r26, r22
 38e:	ca 01       	movw	r24, r20
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	aa 1f       	adc	r26, r26
 396:	bb 1f       	adc	r27, r27
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	aa 1f       	adc	r26, r26
 39e:	bb 1f       	adc	r27, r27
 3a0:	48 0f       	add	r20, r24
 3a2:	59 1f       	adc	r21, r25
 3a4:	6a 1f       	adc	r22, r26
 3a6:	7b 1f       	adc	r23, r27
 3a8:	04 2f       	mov	r16, r20
 3aa:	15 2f       	mov	r17, r21
 3ac:	d6 2f       	mov	r29, r22
 3ae:	b7 2e       	mov	r11, r23
	index = 0;									// Reset index for this search
	Altitude[6] = '.';						// Force last character to a '.'
	while (Altitude[++index] != '.');	// Find the decimal in Alt string

	LongAltitude = 0;							// Begin with a blank slate
	while (index)			// This is Float-to-A, working from the decimal leftward
 3b0:	c1 11       	cpse	r28, r1
 3b2:	ce cf       	rjmp	.-100    	; 0x350 <MsgPrepare+0x136>
 3b4:	c0 92 2d 01 	sts	0x012D, r12
 3b8:	d0 92 2e 01 	sts	0x012E, r13
 3bc:	e0 92 2f 01 	sts	0x012F, r14
 3c0:	f0 92 30 01 	sts	0x0130, r15
		LongTemp *= 10;						// Each digit is worth 10x previous
	}
	// The LongAltitude variable now contains the altitude in meters.

	// The following is an approximation of 3.28 to convert Meters to Feet
	LongAltitude *= 3;						// Start by multiplying by 3
 3c4:	80 91 2d 01 	lds	r24, 0x012D
 3c8:	90 91 2e 01 	lds	r25, 0x012E
 3cc:	a0 91 2f 01 	lds	r26, 0x012F
 3d0:	b0 91 30 01 	lds	r27, 0x0130
 3d4:	6c 01       	movw	r12, r24
 3d6:	7d 01       	movw	r14, r26
 3d8:	cc 0c       	add	r12, r12
 3da:	dd 1c       	adc	r13, r13
 3dc:	ee 1c       	adc	r14, r14
 3de:	ff 1c       	adc	r15, r15
 3e0:	c8 0e       	add	r12, r24
 3e2:	d9 1e       	adc	r13, r25
 3e4:	ea 1e       	adc	r14, r26
 3e6:	fb 1e       	adc	r15, r27
	LongAltitude += LongAltitude>>4;		// add to self/16  (3.1875)
 3e8:	d7 01       	movw	r26, r14
 3ea:	c6 01       	movw	r24, r12
 3ec:	68 94       	set
 3ee:	13 f8       	bld	r1, 3
 3f0:	b6 95       	lsr	r27
 3f2:	a7 95       	ror	r26
 3f4:	97 95       	ror	r25
 3f6:	87 95       	ror	r24
 3f8:	16 94       	lsr	r1
 3fa:	d1 f7       	brne	.-12     	; 0x3f0 <MsgPrepare+0x1d6>
 3fc:	c8 0e       	add	r12, r24
 3fe:	d9 1e       	adc	r13, r25
 400:	ea 1e       	adc	r14, r26
 402:	fb 1e       	adc	r15, r27
	LongAltitude += LongAltitude>>6;		// add to self/64  (3.2373)
 404:	d7 01       	movw	r26, r14
 406:	c6 01       	movw	r24, r12
 408:	68 94       	set
 40a:	15 f8       	bld	r1, 5
 40c:	b6 95       	lsr	r27
 40e:	a7 95       	ror	r26
 410:	97 95       	ror	r25
 412:	87 95       	ror	r24
 414:	16 94       	lsr	r1
 416:	d1 f7       	brne	.-12     	; 0x40c <MsgPrepare+0x1f2>
 418:	c8 0e       	add	r12, r24
 41a:	d9 1e       	adc	r13, r25
 41c:	ea 1e       	adc	r14, r26
 41e:	fb 1e       	adc	r15, r27
	LongAltitude += LongAltitude>>7;		// add to self/128 (3.2626)
 420:	d7 01       	movw	r26, r14
 422:	c6 01       	movw	r24, r12
 424:	68 94       	set
 426:	16 f8       	bld	r1, 6
 428:	b6 95       	lsr	r27
 42a:	a7 95       	ror	r26
 42c:	97 95       	ror	r25
 42e:	87 95       	ror	r24
 430:	16 94       	lsr	r1
 432:	d1 f7       	brne	.-12     	; 0x428 <MsgPrepare+0x20e>
 434:	c8 0e       	add	r12, r24
 436:	d9 1e       	adc	r13, r25
 438:	ea 1e       	adc	r14, r26
 43a:	fb 1e       	adc	r15, r27
	LongAltitude += LongAltitude>>8;		// add to self/256 (3.2758)
 43c:	bb 27       	eor	r27, r27
 43e:	af 2d       	mov	r26, r15
 440:	9e 2d       	mov	r25, r14
 442:	8d 2d       	mov	r24, r13
 444:	c8 0e       	add	r12, r24
 446:	d9 1e       	adc	r13, r25
 448:	ea 1e       	adc	r14, r26
 44a:	fb 1e       	adc	r15, r27
	LongAltitude += LongAltitude>>10;	// add to self/1024 (3.279)
 44c:	d7 01       	movw	r26, r14
 44e:	c6 01       	movw	r24, r12
 450:	07 2e       	mov	r0, r23
 452:	7a e0       	ldi	r23, 0x0A	; 10
 454:	b6 95       	lsr	r27
 456:	a7 95       	ror	r26
 458:	97 95       	ror	r25
 45a:	87 95       	ror	r24
 45c:	7a 95       	dec	r23
 45e:	d1 f7       	brne	.-12     	; 0x454 <MsgPrepare+0x23a>
 460:	70 2d       	mov	r23, r0
 462:	c0 e0       	ldi	r28, 0x00	; 0
 464:	c8 0e       	add	r12, r24
 466:	d9 1e       	adc	r13, r25
 468:	ea 1e       	adc	r14, r26
 46a:	fb 1e       	adc	r15, r27
 46c:	80 e0       	ldi	r24, 0x00	; 0
	return;

}		// End MsgInit

/******************************************************************************/
extern void MsgPrepare(void)
 46e:	15 e0       	ldi	r17, 0x05	; 5
	// The LongAltitude variable now contains the altitude in feet.

	// This converts a long to ASCII with six characters & leading zeros.
	count = 0;									// Convert to character each cycle
	index = 0;									// Start on left and work right
	for (LongTemp = 100000 ; LongTemp > 1; LongTemp /= 10)
 470:	20 ea       	ldi	r18, 0xA0	; 160
 472:	36 e8       	ldi	r19, 0x86	; 134
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	50 e0       	ldi	r21, 0x00	; 0
 478:	0f 2e       	mov	r0, r31
 47a:	fa e0       	ldi	r31, 0x0A	; 10
 47c:	8f 2e       	mov	r8, r31
 47e:	91 2c       	mov	r9, r1
 480:	a1 2c       	mov	r10, r1
 482:	b1 2c       	mov	r11, r1
 484:	f0 2d       	mov	r31, r0
		{
			LongAltitude -= LongTemp;		// By looping, sub'ing each time
			count++;								// Keep track of iteration loops
		}
		Altifeet[index++] = count + 48;	// Save that count as a character
		count = 0;								// Reset count and start over
 486:	d0 e0       	ldi	r29, 0x00	; 0
 488:	1b c0       	rjmp	.+54     	; 0x4c0 <MsgPrepare+0x2a6>
	// This converts a long to ASCII with six characters & leading zeros.
	count = 0;									// Convert to character each cycle
	index = 0;									// Start on left and work right
	for (LongTemp = 100000 ; LongTemp > 1; LongTemp /= 10)
	{
		while (LongAltitude >= LongTemp)	// Convert each order of 10 to a #
 48a:	89 2f       	mov	r24, r25
		{
			LongAltitude -= LongTemp;		// By looping, sub'ing each time
 48c:	c2 1a       	sub	r12, r18
 48e:	d3 0a       	sbc	r13, r19
 490:	e4 0a       	sbc	r14, r20
 492:	f5 0a       	sbc	r15, r21
 494:	98 2f       	mov	r25, r24
 496:	9f 5f       	subi	r25, 0xFF	; 255
	// This converts a long to ASCII with six characters & leading zeros.
	count = 0;									// Convert to character each cycle
	index = 0;									// Start on left and work right
	for (LongTemp = 100000 ; LongTemp > 1; LongTemp /= 10)
	{
		while (LongAltitude >= LongTemp)	// Convert each order of 10 to a #
 498:	c2 16       	cp	r12, r18
 49a:	d3 06       	cpc	r13, r19
 49c:	e4 06       	cpc	r14, r20
 49e:	f5 06       	cpc	r15, r21
 4a0:	a0 f7       	brcc	.-24     	; 0x48a <MsgPrepare+0x270>
		{
			LongAltitude -= LongTemp;		// By looping, sub'ing each time
			count++;								// Keep track of iteration loops
		}
		Altifeet[index++] = count + 48;	// Save that count as a character
 4a2:	ec 2f       	mov	r30, r28
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	ea 5c       	subi	r30, 0xCA	; 202
 4a8:	fe 4f       	sbci	r31, 0xFE	; 254
 4aa:	80 5d       	subi	r24, 0xD0	; 208
 4ac:	80 83       	st	Z, r24
 4ae:	cf 5f       	subi	r28, 0xFF	; 255
	// The LongAltitude variable now contains the altitude in feet.

	// This converts a long to ASCII with six characters & leading zeros.
	count = 0;									// Convert to character each cycle
	index = 0;									// Start on left and work right
	for (LongTemp = 100000 ; LongTemp > 1; LongTemp /= 10)
 4b0:	ca 01       	movw	r24, r20
 4b2:	b9 01       	movw	r22, r18
 4b4:	a5 01       	movw	r20, r10
 4b6:	94 01       	movw	r18, r8
 4b8:	7a d1       	rcall	.+756    	; 0x7ae <__udivmodsi4>
		{
			LongAltitude -= LongTemp;		// By looping, sub'ing each time
			count++;								// Keep track of iteration loops
		}
		Altifeet[index++] = count + 48;	// Save that count as a character
		count = 0;								// Reset count and start over
 4ba:	8d 2f       	mov	r24, r29
	// The LongAltitude variable now contains the altitude in feet.

	// This converts a long to ASCII with six characters & leading zeros.
	count = 0;									// Convert to character each cycle
	index = 0;									// Start on left and work right
	for (LongTemp = 100000 ; LongTemp > 1; LongTemp /= 10)
 4bc:	c1 17       	cp	r28, r17
 4be:	39 f0       	breq	.+14     	; 0x4ce <MsgPrepare+0x2b4>
	{
		while (LongAltitude >= LongTemp)	// Convert each order of 10 to a #
 4c0:	c2 16       	cp	r12, r18
 4c2:	d3 06       	cpc	r13, r19
 4c4:	e4 06       	cpc	r14, r20
 4c6:	f5 06       	cpc	r15, r21
 4c8:	60 f3       	brcs	.-40     	; 0x4a2 <MsgPrepare+0x288>
 4ca:	8f 5f       	subi	r24, 0xFF	; 255
 4cc:	df cf       	rjmp	.-66     	; 0x48c <MsgPrepare+0x272>
 4ce:	20 93 31 01 	sts	0x0131, r18
 4d2:	30 93 32 01 	sts	0x0132, r19
 4d6:	40 93 33 01 	sts	0x0133, r20
 4da:	50 93 34 01 	sts	0x0134, r21
 4de:	c0 92 2d 01 	sts	0x012D, r12
 4e2:	d0 92 2e 01 	sts	0x012E, r13
 4e6:	e0 92 2f 01 	sts	0x012F, r14
 4ea:	f0 92 30 01 	sts	0x0130, r15
 4ee:	10 92 35 01 	sts	0x0135, r1
		}
		Altifeet[index++] = count + 48;	// Save that count as a character
		count = 0;								// Reset count and start over
	}

	Altifeet[index++] = LongAltitude + 48;	// Last digit resides in LongAlt...
 4f2:	ec 2f       	mov	r30, r28
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	ea 5c       	subi	r30, 0xCA	; 202
 4f8:	fe 4f       	sbci	r31, 0xFE	; 254
 4fa:	8c 2d       	mov	r24, r12
 4fc:	80 5d       	subi	r24, 0xD0	; 208
 4fe:	80 83       	st	Z, r24
 500:	cf 5f       	subi	r28, 0xFF	; 255
 502:	c0 93 e1 00 	sts	0x00E1, r28
	Altifeet[index] = 0;						// Terminate string
 506:	ec 2f       	mov	r30, r28
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	ea 5c       	subi	r30, 0xCA	; 202
 50c:	fe 4f       	sbci	r31, 0xFE	; 254
 50e:	10 82       	st	Z, r1
	return;

}		// End MsgPrepare(void)
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
 518:	ff 90       	pop	r15
 51a:	ef 90       	pop	r14
 51c:	df 90       	pop	r13
 51e:	cf 90       	pop	r12
 520:	bf 90       	pop	r11
 522:	af 90       	pop	r10
 524:	9f 90       	pop	r9
 526:	8f 90       	pop	r8
 528:	08 95       	ret

0000052a <MsgSendPos>:
* INPUT:		None
* OUTPUT:	None
* RETURN:	None
*/
{
	ax25sendByte('@');						// The "@" Symbol means time stamp first
 52a:	80 e4       	ldi	r24, 0x40	; 64
 52c:	b6 dd       	rcall	.-1172   	; 0x9a <ax25sendByte>
	ax25sendString(Time);					// Send the time
 52e:	82 ee       	ldi	r24, 0xE2	; 226
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0a de       	rcall	.-1004   	; 0x148 <ax25sendString>
	ax25sendByte('z');						// Tag it as zulu
 534:	8a e7       	ldi	r24, 0x7A	; 122
 536:	b1 dd       	rcall	.-1182   	; 0x9a <ax25sendByte>
	Latitude[7] = 0;							// Truncate Latitude past 7th character
 538:	10 92 fa 00 	sts	0x00FA, r1
	ax25sendString(Latitude);				// Send it
 53c:	83 ef       	ldi	r24, 0xF3	; 243
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	03 de       	rcall	.-1018   	; 0x148 <ax25sendString>
	ax25sendByte('N');						// As degrees North
 542:	8e e4       	ldi	r24, 0x4E	; 78
 544:	aa dd       	rcall	.-1196   	; 0x9a <ax25sendByte>
	ax25sendByte('/');						// Symbol Table Identifier
 546:	8f e2       	ldi	r24, 0x2F	; 47
 548:	a8 dd       	rcall	.-1200   	; 0x9a <ax25sendByte>
	Longitude[8] = 0;							// Truncate Longitude past 8th character
 54a:	10 92 10 01 	sts	0x0110, r1
	ax25sendString(Longitude);				// Send it
 54e:	88 e0       	ldi	r24, 0x08	; 8
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	fa dd       	rcall	.-1036   	; 0x148 <ax25sendString>
	ax25sendByte('W');						// As degrees West
 554:	87 e5       	ldi	r24, 0x57	; 87
 556:	a1 dd       	rcall	.-1214   	; 0x9a <ax25sendByte>
	ax25sendByte('O');						// Symbol Code for a balloon icon
 558:	8f e4       	ldi	r24, 0x4F	; 79
 55a:	9f dd       	rcall	.-1218   	; 0x9a <ax25sendByte>
	Course[3] = 0;								// Truncate course at 3 characters
 55c:	10 92 24 01 	sts	0x0124, r1
	ax25sendString(Course);					// Transmit Course
 560:	81 e2       	ldi	r24, 0x21	; 33
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	f1 dd       	rcall	.-1054   	; 0x148 <ax25sendString>
	ax25sendByte('/');						// Just a separator with no meaning
 566:	8f e2       	ldi	r24, 0x2F	; 47
 568:	98 dd       	rcall	.-1232   	; 0x9a <ax25sendByte>
	Speed[3] = 0;								// Truncate speed at 3 characters
 56a:	10 92 1e 01 	sts	0x011E, r1
	ax25sendString(Speed);					// Transmit Speed
 56e:	8b e1       	ldi	r24, 0x1B	; 27
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	ea dd       	rcall	.-1068   	; 0x148 <ax25sendString>

	// Begin Comment - up to 36 characters are permissable
	ax25sendByte('/');						// A little more data...
 574:	8f e2       	ldi	r24, 0x2F	; 47
 576:	91 dd       	rcall	.-1246   	; 0x9a <ax25sendByte>
	ax25sendByte('A');						// ...to be interpreted as altitude...
 578:	81 e4       	ldi	r24, 0x41	; 65
 57a:	8f dd       	rcall	.-1250   	; 0x9a <ax25sendByte>
	ax25sendByte('=');						// ...starts right now
 57c:	8d e3       	ldi	r24, 0x3D	; 61
 57e:	8d dd       	rcall	.-1254   	; 0x9a <ax25sendByte>
	ax25sendString(Altifeet);				// Send Altitude in feet
 580:	86 e3       	ldi	r24, 0x36	; 54
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	e1 dd       	rcall	.-1086   	; 0x148 <ax25sendString>
	ax25sendByte(' ');						// Space for formatting
 586:	80 e2       	ldi	r24, 0x20	; 32
 588:	88 dd       	rcall	.-1264   	; 0x9a <ax25sendByte>
	// Send number of Satellites tracked in HEX
	if (Satellites[0] == '1') Satellites[1] += 17; // '0' becomes 'A'...
 58a:	80 91 2a 01 	lds	r24, 0x012A
 58e:	81 33       	cpi	r24, 0x31	; 49
 590:	29 f4       	brne	.+10     	; 0x59c <MsgSendPos+0x72>
 592:	eb e2       	ldi	r30, 0x2B	; 43
 594:	f1 e0       	ldi	r31, 0x01	; 1
 596:	80 81       	ld	r24, Z
 598:	8f 5e       	subi	r24, 0xEF	; 239
 59a:	80 83       	st	Z, r24
	ax25sendByte(Satellites[1]);
 59c:	80 91 2b 01 	lds	r24, 0x012B
 5a0:	7c dd       	rcall	.-1288   	; 0x9a <ax25sendByte>
	ax25sendByte(' ');						// Space for formatting
 5a2:	80 e2       	ldi	r24, 0x20	; 32
 5a4:	7a dd       	rcall	.-1292   	; 0x9a <ax25sendByte>
 5a6:	08 95       	ret

000005a8 <MsgHandler>:
*/
{
	static unsigned char	commas;			// Number of commas for far in sentence
	static unsigned char	index;			// Individual array index

	if (newchar == 0)							// A NULL character resets GPS decoding
 5a8:	81 11       	cpse	r24, r1
 5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <MsgHandler+0x10>
	{
		commas = 25;							// Set to an outrageous value
 5ac:	89 e1       	ldi	r24, 0x19	; 25
 5ae:	80 93 3d 01 	sts	0x013D, r24
		sentence_type = FALSE;				// Clear local parse variable
 5b2:	10 92 3e 01 	sts	0x013E, r1
		return;
 5b6:	08 95       	ret
	}

	if (newchar == '$')						// Start of Sentence character, reset
 5b8:	84 32       	cpi	r24, 0x24	; 36
 5ba:	29 f4       	brne	.+10     	; 0x5c6 <MsgHandler+0x1e>
	{
		commas = 0;								// No commas detected in sentence for far
 5bc:	10 92 3d 01 	sts	0x013D, r1
		sentence_type = FALSE;				// Clear local parse variable
 5c0:	10 92 3e 01 	sts	0x013E, r1
		return;
 5c4:	08 95       	ret
	}

	if (newchar == ',')						// If there is a comma
 5c6:	8c 32       	cpi	r24, 0x2C	; 44
 5c8:	41 f4       	brne	.+16     	; 0x5da <MsgHandler+0x32>
	{
		commas += 1;							// Increment the comma count
 5ca:	80 91 3d 01 	lds	r24, 0x013D
 5ce:	8f 5f       	subi	r24, 0xFF	; 255
 5d0:	80 93 3d 01 	sts	0x013D, r24
		index = 0;								// And reset the field index
 5d4:	10 92 3f 01 	sts	0x013F, r1
		return;
 5d8:	08 95       	ret
	}

	if (commas == 0)
 5da:	90 91 3d 01 	lds	r25, 0x013D
 5de:	91 11       	cpse	r25, r1
 5e0:	19 c0       	rjmp	.+50     	; 0x614 <MsgHandler+0x6c>
	{
		switch(newchar)
 5e2:	83 34       	cpi	r24, 0x43	; 67
 5e4:	31 f0       	breq	.+12     	; 0x5f2 <MsgHandler+0x4a>
 5e6:	83 35       	cpi	r24, 0x53	; 83
 5e8:	41 f0       	breq	.+16     	; 0x5fa <MsgHandler+0x52>
 5ea:	81 34       	cpi	r24, 0x41	; 65
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <MsgHandler+0x48>
 5ee:	79 c0       	rjmp	.+242    	; 0x6e2 <MsgHandler+0x13a>
 5f0:	08 c0       	rjmp	.+16     	; 0x602 <MsgHandler+0x5a>
		{
			case ('C'):							// Only the GPRMC sentence contains a "C"
				sentence_type = GPRMC;		// Set local parse variable
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	80 93 3e 01 	sts	0x013E, r24
				break;
 5f8:	08 95       	ret
			case ('S'):							// Take note if sentence contains an "S"
				sentence_type = 'S';			// ...because we don't want to parse it
 5fa:	83 e5       	ldi	r24, 0x53	; 83
 5fc:	80 93 3e 01 	sts	0x013E, r24
				break;
 600:	08 95       	ret
			case ('A'):							// The GPGGA sentence ID contains "A"
				if (sentence_type != 'S')	// As does GPGSA, which we will ignore
 602:	80 91 3e 01 	lds	r24, 0x013E
 606:	83 35       	cpi	r24, 0x53	; 83
 608:	09 f4       	brne	.+2      	; 0x60c <MsgHandler+0x64>
 60a:	6b c0       	rjmp	.+214    	; 0x6e2 <MsgHandler+0x13a>
					sentence_type = GPGGA;	// Set local parse variable
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	80 93 3e 01 	sts	0x013E, r24
 612:	08 95       	ret
		}

		return;
	}

	if (sentence_type == GPGGA)			// GPGGA sentence	decode initiated
 614:	20 91 3e 01 	lds	r18, 0x013E
 618:	22 30       	cpi	r18, 0x02	; 2
 61a:	09 f0       	breq	.+2      	; 0x61e <MsgHandler+0x76>
 61c:	46 c0       	rjmp	.+140    	; 0x6aa <MsgHandler+0x102>
	{
		switch (commas)
 61e:	94 30       	cpi	r25, 0x04	; 4
 620:	19 f1       	breq	.+70     	; 0x668 <MsgHandler+0xc0>
 622:	30 f4       	brcc	.+12     	; 0x630 <MsgHandler+0x88>
 624:	91 30       	cpi	r25, 0x01	; 1
 626:	51 f0       	breq	.+20     	; 0x63c <MsgHandler+0x94>
 628:	92 30       	cpi	r25, 0x02	; 2
 62a:	09 f0       	breq	.+2      	; 0x62e <MsgHandler+0x86>
 62c:	5a c0       	rjmp	.+180    	; 0x6e2 <MsgHandler+0x13a>
 62e:	11 c0       	rjmp	.+34     	; 0x652 <MsgHandler+0xaa>
 630:	97 30       	cpi	r25, 0x07	; 7
 632:	29 f1       	breq	.+74     	; 0x67e <MsgHandler+0xd6>
 634:	99 30       	cpi	r25, 0x09	; 9
 636:	09 f0       	breq	.+2      	; 0x63a <MsgHandler+0x92>
 638:	54 c0       	rjmp	.+168    	; 0x6e2 <MsgHandler+0x13a>
 63a:	2c c0       	rjmp	.+88     	; 0x694 <MsgHandler+0xec>
		{
			case (1):									// Time field, grab characters
				Time_Temp[index++] = newchar;
 63c:	90 91 3f 01 	lds	r25, 0x013F
 640:	e9 2f       	mov	r30, r25
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	ee 5b       	subi	r30, 0xBE	; 190
 646:	fe 4f       	sbci	r31, 0xFE	; 254
 648:	80 83       	st	Z, r24
 64a:	9f 5f       	subi	r25, 0xFF	; 255
 64c:	90 93 3f 01 	sts	0x013F, r25
				return;
 650:	08 95       	ret
			case (2):									// Latitude field, grab chars
				Latitude_Temp[index++] = newchar;
 652:	90 91 3f 01 	lds	r25, 0x013F
 656:	e9 2f       	mov	r30, r25
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	e7 51       	subi	r30, 0x17	; 23
 65c:	ff 4f       	sbci	r31, 0xFF	; 255
 65e:	80 83       	st	Z, r24
 660:	9f 5f       	subi	r25, 0xFF	; 255
 662:	90 93 3f 01 	sts	0x013F, r25
				return;
 666:	08 95       	ret
			case (4):									// Longitude field, grab chars
				Longitude_Temp[index++] = newchar;
 668:	90 91 3f 01 	lds	r25, 0x013F
 66c:	e9 2f       	mov	r30, r25
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	e3 50       	subi	r30, 0x03	; 3
 672:	ff 4f       	sbci	r31, 0xFF	; 255
 674:	80 83       	st	Z, r24
 676:	9f 5f       	subi	r25, 0xFF	; 255
 678:	90 93 3f 01 	sts	0x013F, r25
				return;
 67c:	08 95       	ret
			case (7):									// Satellite field, grab chars
				Satellites_Temp[index++] = newchar;
 67e:	90 91 3f 01 	lds	r25, 0x013F
 682:	e9 2f       	mov	r30, r25
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	e9 5d       	subi	r30, 0xD9	; 217
 688:	fe 4f       	sbci	r31, 0xFE	; 254
 68a:	80 83       	st	Z, r24
 68c:	9f 5f       	subi	r25, 0xFF	; 255
 68e:	90 93 3f 01 	sts	0x013F, r25
				return;
 692:	08 95       	ret
			case (9):									// Altitude field, grab chars
				Altitude_Temp[index++] = newchar;
 694:	90 91 3f 01 	lds	r25, 0x013F
 698:	e9 2f       	mov	r30, r25
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	e7 52       	subi	r30, 0x27	; 39
 69e:	ff 4f       	sbci	r31, 0xFF	; 255
 6a0:	80 83       	st	Z, r24
 6a2:	9f 5f       	subi	r25, 0xFF	; 255
 6a4:	90 93 3f 01 	sts	0x013F, r25
				return;
 6a8:	08 95       	ret
		}

		return;
	}		// end if (sentence_type == GPGGA)

	if (sentence_type == GPRMC)			// GPGGA sentence	decode initiated
 6aa:	21 30       	cpi	r18, 0x01	; 1
 6ac:	d1 f4       	brne	.+52     	; 0x6e2 <MsgHandler+0x13a>
	{
		switch (commas)
 6ae:	97 30       	cpi	r25, 0x07	; 7
 6b0:	19 f0       	breq	.+6      	; 0x6b8 <MsgHandler+0x110>
 6b2:	98 30       	cpi	r25, 0x08	; 8
 6b4:	b1 f4       	brne	.+44     	; 0x6e2 <MsgHandler+0x13a>
 6b6:	0b c0       	rjmp	.+22     	; 0x6ce <MsgHandler+0x126>
		{
			case (7):									// Speed field, grab characters
				Speed_Temp[index++] = newchar;
 6b8:	90 91 3f 01 	lds	r25, 0x013F
 6bc:	e9 2f       	mov	r30, r25
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	e3 53       	subi	r30, 0x33	; 51
 6c2:	ff 4f       	sbci	r31, 0xFF	; 255
 6c4:	80 83       	st	Z, r24
 6c6:	9f 5f       	subi	r25, 0xFF	; 255
 6c8:	90 93 3f 01 	sts	0x013F, r25
				return;
 6cc:	08 95       	ret
			case (8):									// Course field, grab characters
				Course_Temp[index++] = newchar;
 6ce:	90 91 3f 01 	lds	r25, 0x013F
 6d2:	e9 2f       	mov	r30, r25
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	ed 52       	subi	r30, 0x2D	; 45
 6d8:	ff 4f       	sbci	r31, 0xFF	; 255
 6da:	80 83       	st	Z, r24
 6dc:	9f 5f       	subi	r25, 0xFF	; 255
 6de:	90 93 3f 01 	sts	0x013F, r25
 6e2:	08 95       	ret

000006e4 <mainTransmit>:
* INPUT:		None
* OUTPUT:	None
* RETURN:	None
*/
{
	UCSRB &= ~((1<<RXCIE)|(1<<TXCIE));	// Disable the serial interrupts
 6e4:	8a b1       	in	r24, 0x0a	; 10
 6e6:	8f 73       	andi	r24, 0x3F	; 63
 6e8:	8a b9       	out	0x0a, r24	; 10
	ACSR &= ~(1<<ACIE);						// Disable the comparator
 6ea:	43 98       	cbi	0x08, 3	; 8
	TCCR0A = 0x03; 								// Timer0 clock prescale of 64
 6ec:	83 e0       	ldi	r24, 0x03	; 3
 6ee:	80 bf       	out	0x30, r24	; 48
	TCCR1B = 0x02;								// Timer1 clock prescale of 8
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	8e bd       	out	0x2e, r24	; 46
	transmit = TRUE;							// Enable the transmitter
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	80 93 40 01 	sts	0x0140, r24
	ax25sendHeader();							// Send APRS header
 6fa:	47 dd       	rcall	.-1394   	; 0x18a <ax25sendHeader>
 6fc:	08 95       	ret

000006fe <mainDelay>:
* INPUT:		None
* OUTPUT:	None
* RETURN:	None
*/
{
	maindelay = TRUE;							// Set the condition variable
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	90 93 4b 01 	sts	0x014B, r25
	WatchdogReset();							// Kick the dog before we start
 704:	a8 95       	wdr
	TCNT0 = 255 - timeout;					// Set desired delay
 706:	80 95       	com	r24
 708:	82 bf       	out	0x32, r24	; 50
	while(maindelay)
 70a:	80 91 4b 01 	lds	r24, 0x014B
 70e:	88 23       	and	r24, r24
 710:	29 f0       	breq	.+10     	; 0x71c <mainDelay+0x1e>
	{
		Serial_Processes();					// Do this until cleared by interrupt
 712:	58 dd       	rcall	.-1360   	; 0x1c4 <Serial_Processes>
*/
{
	maindelay = TRUE;							// Set the condition variable
	WatchdogReset();							// Kick the dog before we start
	TCNT0 = 255 - timeout;					// Set desired delay
	while(maindelay)
 714:	80 91 4b 01 	lds	r24, 0x014B
 718:	81 11       	cpse	r24, r1
 71a:	fb cf       	rjmp	.-10     	; 0x712 <mainDelay+0x14>
 71c:	08 95       	ret

0000071e <Delay>:
* INPUT:		None
* OUTPUT:	None
* RETURN:	None
*/
{
	delay = TRUE;							// Set the condition variable
 71e:	91 e0       	ldi	r25, 0x01	; 1
 720:	90 93 4a 01 	sts	0x014A, r25
	WatchdogReset();						// Kick the dog before we start
 724:	a8 95       	wdr
	TCNT0 = 255 - timeout;				// Set desired delay
 726:	80 95       	com	r24
 728:	82 bf       	out	0x32, r24	; 50
	while(delay)
 72a:	80 91 4a 01 	lds	r24, 0x014A
 72e:	88 23       	and	r24, r24
 730:	29 f0       	breq	.+10     	; 0x73c <Delay+0x1e>
	{
		Serial_Processes();				// Do this until cleared by interrupt
 732:	48 dd       	rcall	.-1392   	; 0x1c4 <Serial_Processes>
*/
{
	delay = TRUE;							// Set the condition variable
	WatchdogReset();						// Kick the dog before we start
	TCNT0 = 255 - timeout;				// Set desired delay
	while(delay)
 734:	80 91 4a 01 	lds	r24, 0x014A
 738:	81 11       	cpse	r24, r1
 73a:	fb cf       	rjmp	.-10     	; 0x732 <Delay+0x14>
 73c:	08 95       	ret

0000073e <main>:
	static unsigned short loop;			// Generic loop variable
	static unsigned char	ones_seconds;	// Remembers tens digit of seconds
	static unsigned char seconds;			// Holds seconds calculated from GPS

	//Initialize serial communication functions
	SerInit();
 73e:	3a dd       	rcall	.-1420   	; 0x1b4 <SerInit>
	MsgInit();
 740:	57 dd       	rcall	.-1362   	; 0x1f0 <MsgInit>
	//	Bit/Pin 4 (out) connected to a 2k ohm resistor
	//	Bit/Pin 3 (out) connected to a 3.9k ohm resistor
	//	Bit/Pin 2 (out) connected to an 8.2k ohm resistor
	//	Bit/Pin 1 (out) connected to the PTT circuitry
	//	Bit/Pin 0 (out) DCD LED line
	PORTB = 0x00;							// Initial state is everything off
 742:	18 ba       	out	0x18, r1	; 24
	DDRB  = 0x3F;							// Data direction register for port B
 744:	8f e3       	ldi	r24, 0x3F	; 63
 746:	87 bb       	out	0x17, r24	; 23

	//	Initialize the 8-bit Timer0 to clock at 1.8432 MHz
	TCCR0A = 0x07; 							// Timer0 clock prescale of 8. This takes the place of timer 2 in Gary's original code
 748:	87 e0       	ldi	r24, 0x07	; 7
 74a:	80 bf       	out	0x30, r24	; 48

	// Use the 16-bit Timer1 to measure frequency; set it to clock at 1.8432 MHz
	TCCR1B = 0x02;							// Timer2 clock prescale of 8. This is still going to be timer 1. The reciever timer is not needed. 
 74c:	82 e0       	ldi	r24, 0x02	; 2
 74e:	8e bd       	out	0x2e, r24	; 46

	
	// Enable Timer interrupts
	TIMSK = 1<<TOIE0 | 1<<TOIE1; // 
 750:	82 e8       	ldi	r24, 0x82	; 130
 752:	89 bf       	out	0x39, r24	; 57

	// Enable the watchdog timer
	WDTCR	= (1<<WDCE) | (1<<WDE);		// Wake-up the watchdog register
 754:	88 e1       	ldi	r24, 0x18	; 24
 756:	81 bd       	out	0x21, r24	; 33
	WDTCR	= (1<<WDE) | 7;				// Enable and timeout around 2.1s
 758:	8f e0       	ldi	r24, 0x0F	; 15
 75a:	81 bd       	out	0x21, r24	; 33

	// Enable interrupts
	sei();
 75c:	78 94       	sei

	// Reset watchdog
	WatchdogReset();
 75e:	a8 95       	wdr
while (TRUE)
{
	//		txtone = SPACE;						// Debug tone for testing (MARK or SPACE)
	//		while(1) WatchdogReset();			// Debug with a single one tone
	//		while(1) ax25sendByte(0);			// Debug with a toggling tone
	Delay(250);
 760:	8a ef       	ldi	r24, 0xFA	; 250
 762:	dd df       	rcall	.-70     	; 0x71e <Delay>
	Delay(250);
 764:	8a ef       	ldi	r24, 0xFA	; 250
 766:	db df       	rcall	.-74     	; 0x71e <Delay>
	Delay(250);
 768:	8a ef       	ldi	r24, 0xFA	; 250
 76a:	d9 df       	rcall	.-78     	; 0x71e <Delay>
	Delay(250);
 76c:	8a ef       	ldi	r24, 0xFA	; 250
 76e:	d7 df       	rcall	.-82     	; 0x71e <Delay>
	Delay(250);
 770:	8a ef       	ldi	r24, 0xFA	; 250
 772:	d5 df       	rcall	.-86     	; 0x71e <Delay>
	//		while(busy)	Delay(250);			// Wait for break (not on balloons!!!)
	MsgPrepare();							// Prepare variables for APRS position
 774:	52 dd       	rcall	.-1372   	; 0x21a <MsgPrepare>
	mainTransmit();						// Enable transmitter
 776:	b6 df       	rcall	.-148    	; 0x6e4 <mainTransmit>

	if (command == 0)						// Default message to be sent
	{
		MsgSendPos();						// Send Position Report and comment
 778:	d8 de       	rcall	.-592    	; 0x52a <MsgSendPos>
 77a:	f2 cf       	rjmp	.-28     	; 0x760 <main+0x22>

0000077c <__mulsi3>:
 77c:	ff 27       	eor	r31, r31
 77e:	ee 27       	eor	r30, r30
 780:	bb 27       	eor	r27, r27
 782:	aa 27       	eor	r26, r26

00000784 <__mulsi3_loop>:
 784:	60 ff       	sbrs	r22, 0
 786:	04 c0       	rjmp	.+8      	; 0x790 <__mulsi3_skip1>
 788:	a2 0f       	add	r26, r18
 78a:	b3 1f       	adc	r27, r19
 78c:	e4 1f       	adc	r30, r20
 78e:	f5 1f       	adc	r31, r21

00000790 <__mulsi3_skip1>:
 790:	22 0f       	add	r18, r18
 792:	33 1f       	adc	r19, r19
 794:	44 1f       	adc	r20, r20
 796:	55 1f       	adc	r21, r21
 798:	96 95       	lsr	r25
 79a:	87 95       	ror	r24
 79c:	77 95       	ror	r23
 79e:	67 95       	ror	r22
 7a0:	89 f7       	brne	.-30     	; 0x784 <__mulsi3_loop>
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	76 07       	cpc	r23, r22
 7a6:	71 f7       	brne	.-36     	; 0x784 <__mulsi3_loop>

000007a8 <__mulsi3_exit>:
 7a8:	cf 01       	movw	r24, r30
 7aa:	bd 01       	movw	r22, r26
 7ac:	08 95       	ret

000007ae <__udivmodsi4>:
 7ae:	a1 e2       	ldi	r26, 0x21	; 33
 7b0:	1a 2e       	mov	r1, r26
 7b2:	aa 1b       	sub	r26, r26
 7b4:	bb 1b       	sub	r27, r27
 7b6:	fd 01       	movw	r30, r26
 7b8:	0d c0       	rjmp	.+26     	; 0x7d4 <__udivmodsi4_ep>

000007ba <__udivmodsi4_loop>:
 7ba:	aa 1f       	adc	r26, r26
 7bc:	bb 1f       	adc	r27, r27
 7be:	ee 1f       	adc	r30, r30
 7c0:	ff 1f       	adc	r31, r31
 7c2:	a2 17       	cp	r26, r18
 7c4:	b3 07       	cpc	r27, r19
 7c6:	e4 07       	cpc	r30, r20
 7c8:	f5 07       	cpc	r31, r21
 7ca:	20 f0       	brcs	.+8      	; 0x7d4 <__udivmodsi4_ep>
 7cc:	a2 1b       	sub	r26, r18
 7ce:	b3 0b       	sbc	r27, r19
 7d0:	e4 0b       	sbc	r30, r20
 7d2:	f5 0b       	sbc	r31, r21

000007d4 <__udivmodsi4_ep>:
 7d4:	66 1f       	adc	r22, r22
 7d6:	77 1f       	adc	r23, r23
 7d8:	88 1f       	adc	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	1a 94       	dec	r1
 7de:	69 f7       	brne	.-38     	; 0x7ba <__udivmodsi4_loop>
 7e0:	60 95       	com	r22
 7e2:	70 95       	com	r23
 7e4:	80 95       	com	r24
 7e6:	90 95       	com	r25
 7e8:	9b 01       	movw	r18, r22
 7ea:	ac 01       	movw	r20, r24
 7ec:	bd 01       	movw	r22, r26
 7ee:	cf 01       	movw	r24, r30
 7f0:	08 95       	ret

000007f2 <__eerd_byte_tn4313>:
 7f2:	e1 99       	sbic	0x1c, 1	; 28
 7f4:	fe cf       	rjmp	.-4      	; 0x7f2 <__eerd_byte_tn4313>
 7f6:	1f ba       	out	0x1f, r1	; 31
 7f8:	8e bb       	out	0x1e, r24	; 30
 7fa:	e0 9a       	sbi	0x1c, 0	; 28
 7fc:	99 27       	eor	r25, r25
 7fe:	8d b3       	in	r24, 0x1d	; 29
 800:	08 95       	ret

00000802 <_exit>:
 802:	f8 94       	cli

00000804 <__stop_program>:
 804:	ff cf       	rjmp	.-2      	; 0x804 <__stop_program>
